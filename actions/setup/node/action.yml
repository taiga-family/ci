name: Action for Node.js
description: Node.js setup cache

inputs:
  node-version:
    description: Node.js version
    required: false
    default: 22.x
  node-registry:
    description: Registry
    required: false
    default: 'https://registry.npmjs.org'
  npm-ci-flags:
    description: NPM flags
    required: false
    default: ''
  node-path:
    description: nested node path
    required: false
    default: |
      node_modules/
      **/node_modules/
  validate-peer-deps:
    description: Validation peer dependencies
    required: false
    default: 'true'
  nx-path:
    description: nx path
    required: false
    default: |
      .angular/
      .nx/

outputs:
  root-package-version:
    description: Full version of root package.json (x.y.z)
    value: ${{ steps.output.outputs.root-package-version }}
  root-package-major-version:
    description: Only major version of root package.json (x)
    value: ${{ steps.output.outputs.root-package-major-version }}
  is-release-candidate:
    description: root package.json includes -rc
    value: ${{ steps.output.outputs.is-release-candidate }}

runs:
  using: composite
  steps:
    - name: Use Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v4.4.0
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: ${{ inputs.node-registry }}

    - shell: bash
      run: |
        echo "Show environment Node.js, npm ..."
        node -v
        npm -v

    - shell: bash
      run: echo "CYPRESS_CACHE_FOLDER=./node_modules/cypress/cache-cypress" >> $GITHUB_ENV

    - name: Restore node_modules from cache
      id: cache-node-modules
      uses: actions/cache@v4.2.4
      with:
        path: ${{ inputs.node-path }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: Load Nx cache state for NX_BASE
      uses: actions/cache@v4
      if: steps.cache-node-modules.outputs.cache-hit == 'true'
      with:
        path: ${{ inputs.nx-path }}
        key: '${{ runner.os }}-node-${{ inputs.node-version }}-nx-caches-${{ env.NX_BASE }}'

    - shell: bash
      run: |
        npm set strict-ssl false
        npm config set fund false
        npm config set audit false
        npm config set fetch-retries 10
        npm config set fetch-retry-mintimeout 600000
        npm config set fetch-retry-maxtimeout 1200000
        npm config set fetch-timeout 1800000

    - name: Clean install dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      id: clean-install
      run: npm ci ${{ inputs.npm-ci-flags }}
      shell: bash

    - name: Save Nx cache state
      if: github.ref == 'refs/heads/main'
      uses: actions/cache/save@v4
      with:
        path: ${{ inputs.node-path }}
        key: '${{ runner.os }}-node-${{ inputs.node-version }}-nx-caches-${{ github.sha }}'

    - id: output
      shell: bash
      run: |
        echo "root-package-version=v$(node -p "require('./package.json')?.version")" >> $GITHUB_OUTPUT
        echo "root-package-major-version=$(node -p "parseInt(require('./package.json')?.version)")" >> $GITHUB_OUTPUT
        echo "is-release-candidate=$(node -p "require('./package.json')?.version?.includes('rc')")" >> $GITHUB_OUTPUT

    - name: Confirm a package-lock.json actually resolves all dependencies in a package.json
      shell: bash
      run: |
        if [[ "${{ inputs.validate-peer-deps }}" == "true" ]]; then
          npm ls
        fi

    - id: audit
      continue-on-error: true
      shell: bash
      if: github.event.pull_request.number
      run: |
        set +e
        npm audit --audit-level=critical > npm-audit.txt
        exit_code=$(echo $?)
        echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

        cat audit.txt
        echo "Exit code: $exit_code"

    - uses: actions/github-script@v6
      if: github.event.pull_request.number
      continue-on-error: true
      with:
        script: |
          try {
              await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: 'npm-audit'
            });

            console.log('Comment deleted successfully');
          } catch (error) {
            if (error.status !== 404) {
              throw error;
            }

            console.log('Comment was already deleted or never existed');
          }

    - name: Create formatted audit comment
      if: steps.audit.outputs.exit_code != '0' && github.event.pull_request.number
      shell: bash
      run: |
        AUDIT_CONTENT=$(cat audit.txt | sed 's/&/&amp;/g; s/</&lt;/g; s/>/&gt;/g; s/"/&quot;/g; s/'"'"'/&&#39;/g')
        AUDIT_SUMMARY=$(head -n 5 audit.txt | grep -E "(vulnerabilities|low|moderate|high|critical)")

        cat > npm-audit.txt << EOF

        <h3>ðŸš¨ NPM Audit Error</h3>
        <p><strong>$AUDIT_SUMMARY</strong></p>

        <details>
        <summary>Show details</summary>

        \`\`\`
        $AUDIT_CONTENT
        \`\`\`

        </details>

        EOF

    - uses: peter-evans/create-or-update-comment@v4
      if: steps.audit.outputs.exit_code != '0' && github.event.pull_request.number
      continue-on-error: true
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-id: npm-audit
        body-file: npm-audit.txt
        edit-mode: replace

    - continue-on-error: true
      shell: bash
      run: rm npm-audit.txt
