name: Action for Node.js
description: Node.js setup cache

inputs:
  node-version:
    description: Node.js version
    required: false
    default: 18.x
  node-registry:
    description: Registry
    required: false
    default: "https://registry.npmjs.org"
  node-path:
    description: nested node path
    required: false
    default: |
      ~/.npm
      node_modules
      **/node_modules/
      **/.eslintcache

outputs:
  root-package-version:
    description: Full version of root package.json (x.y.z)
    value: ${{ steps.output.outputs.root-package-version }}
  root-package-major-version:
    description: Only major version of root package.json (x)
    value: ${{ steps.output.outputs.root-package-major-version }}
  is-release-candidate:
    description: root package.json includes -rc
    value: ${{ steps.output.outputs.is-release-candidate }}

runs:
  using: composite
  steps:
    - name: Use Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v3.8.1
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: ${{ inputs.node-registry }}

    - name: Set cache path
      shell: bash
      run: npm config set cache ~/.npm --global

    - name: Restore node_modules from cache
      id: cache-node-modules
      uses: actions/cache@v3.3.2
      with:
        path: ${{ inputs.node-path }}
        key: ${{ runner.os }}-node-${{ inputs.node-version }}__${{ hashFiles('**/package-lock.json') }}

    - shell: bash
      run: echo "CYPRESS_CACHE_FOLDER=./node_modules/cache-cypress" >> $GITHUB_ENV

    - shell: bash
      run: |
        echo "Show environment Node.js, npm ..."
        node -v
        npm -v

    - name: Clean install dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      id: clean-install
      continue-on-error: true
      run: npm ci --loglevel error --audit=false --fund=false --cache=~/.npm
      shell: bash

    - name: Retry clean install
      shell: bash
      if: steps.cache-node-modules.outputs.cache-hit != 'true' && steps.clean-install.outputs.conclusion != 'success'
      run: |
        rm -rf node_modules
        npm --global cache verify
        npm --global cache verify
        sleep 300
        npm ci --verbose --audit=false --fund=false --cache=~/.npm

    - id: output
      shell: bash
      run: |
        echo "root-package-version=v$(node -p "require('./package.json')?.version")" >> $GITHUB_OUTPUT
        echo "root-package-major-version=$(node -p "parseInt(require('./package.json')?.version)")" >> $GITHUB_OUTPUT
        echo "is-release-candidate=$(node -p "require('./package.json')?.version?.includes('rc')")" >> $GITHUB_OUTPUT
